local function spine_callback(self, node, event, data)
	--pprint("SPINE CALLBACK", node, event, data)
end

local bone_names = {
        "spine/root",
        "spine/hip",
        "spine/aim-constraint-target",
        "spine/rear-thigh",
        "spine/rear-shin",
        "spine/rear-foot",
        "spine/back-foot-tip",
        "spine/torso",
        "spine/torso2",
        "spine/torso3",
        "spine/front-shoulder",
        "spine/front-upper-arm",
        "spine/front-bracer",
        "spine/front-fist",
        "spine/back-shoulder",
        "spine/rear-upper-arm",
        "spine/rear-bracer",
        "spine/gun",
        "spine/gun-tip",
        "spine/muzzle",
        -- "spine/muzzle-ring",
        -- "spine/muzzle-ring2",
        -- "spine/muzzle-ring3",
        -- "spine/muzzle-ring4",
        "spine/neck",
        "spine/head",
        "spine/hair1",
        "spine/hair2",
        "spine/hair3",
        "spine/hair4",
        "spine/head-control",
        "spine/front-thigh",
        "spine/front-shin",
        "spine/front-foot",
        "spine/front-foot-tip"
        -- "spine/crosshair",
        -- "spine/rear-foot-target",
        -- "spine/rear-leg-target",
        -- "spine/board-ik",
        -- "spine/clipping",
        -- "spine/hoverboard-controller",
        -- "spine/exhaust1",
        -- "spine/exhaust2",
        -- "spine/exhaust3",
        -- "spine/hoverboard-thruster-front",
        -- "spine/hoverglow-front",
        -- "spine/hoverboard-thruster-rear",
        -- "spine/hoverglow-rear",
        -- "spine/side-glow1",
        -- "spine/side-glow2",
        -- "spine/portal-root",
        -- "spine/flare1",
        -- "spine/flare10",
        -- "spine/flare2",
        -- "spine/flare3",
        -- "spine/flare4",
        -- "spine/flare5",
        -- "spine/flare6",
        -- "spine/flare7",
        -- "spine/flare8",
        -- "spine/flare9",
        -- "spine/portal",
        -- "spine/portal-shade",
        -- "spine/portal-streaks1",
        -- "spine/portal-streaks2",
        -- "spine/front-foot-target",
        -- "spine/front-leg-target"
    }

function init(self)
	print("HELLO FROM GUI!")
	self.n = gui.get_node("spine")
	gui.play_spine_anim(self.n, "walk", gui.PLAYBACK_LOOP_FORWARD, {}, spine_callback)
	--gui.play_spine_anim(self.n, "run", gui.PLAYBACK_LOOP_FORWARD, {}, spine_callback)
	--gui.set_spine_cursor(self.n, 0.5)
	gui.set_spine_playback_rate(self.n, 0.5)


	-- self.nclone = gui.clone(self.n)
	-- local pos = gui.get_position(self.n)
	-- pos.x = pos.x + 100
	-- pos.y = pos.y - 50
	-- gui.set_position(self.nclone, pos)

	local pos = gui.get_position(self.n)
	pos.x = pos.x - 300
	pos.y = pos.y - 50

	-- self.nn = gui.new_spine_node(pos, "spineboy")
	-- gui.play_spine_anim(self.nn, "jump", gui.PLAYBACK_LOOP_FORWARD, {}, spine_callback)
	-- gui.set_color(self.nn, vmath.vector4(1,0,0,1))

	--timer.delay(0.5, false, function (self, timer, data)
	--	print("CANCELLING")
	--	gui.cancel_spine(self.n)
	--end)

	--print("gui.get_spine_skin", gui.get_spine_skin(self.n))
	--gui.set_spine_skin(self.n, "default")
	print("gui.get_spine_skin", gui.get_spine_skin(self.n))
	print("gui.get_spine_animation", gui.get_spine_animation(self.n))
	print("gui.get_spine_cursor", gui.get_spine_cursor(self.n))
	print("gui.get_spine_playback_rate", gui.get_spine_playback_rate(self.n))
	print("gui.get_spine_scene", gui.get_spine_scene(self.n))



	-- bones
	--local bone = gui.get_spine_bone(self.n, "not-exist")
	--local bone = gui.get_spine_bone(self.n, "spine/gun-tip")
	--print("bone", bone)
	--gui.set_parent(bone_sprite, bone)

	local bone_sprite = gui.get_node("bone")

	for i, bone_id in ipairs(bone_names) do
		--print("SCRIPT bone", bone_id)
		local bone = gui.get_node(bone_id)
		local bone_sprite_clone = gui.clone(bone_sprite)

		gui.set_parent(bone_sprite_clone, bone)
	end

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	--print("gui.get_spine_cursor", gui.get_spine_cursor(self.n))
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
